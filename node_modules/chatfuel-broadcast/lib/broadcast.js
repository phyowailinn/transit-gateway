'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://docs.chatfuel.com/broadcasting/broadcasting-documentation/broadcasting-api

var CHATFUEL_BASE_URL = 'https://api.chatfuel.com';

var validateExpectedParameters = function validateExpectedParameters(options) {
    var expectedParameters = ['botId', 'blockId', 'token', 'userId'];

    if (!options) {
        throw new Error('Expected options to be passed');
    }

    expectedParameters.forEach(function (parameter) {
        if (!options[parameter]) {
            throw new Error('Expected ' + parameter + ' to be passed');
        }
    });
};

var createChatfuelBroadcastUrl = function createChatfuelBroadcastUrl(botId, userId) {
    return CHATFUEL_BASE_URL + '/bots/' + botId + '/users/' + userId + '/send';
};

var broadcast = function broadcast(options) {
    validateExpectedParameters(options);

    var botId = options.botId,
        blockId = options.blockId,
        token = options.token,
        userId = options.userId,
        attributes = options.attributes;


    var chatfuelBroadcastUrl = createChatfuelBroadcastUrl(botId, userId);

    var query = Object.assign({}, {
        chatfuel_token: token,
        chatfuel_block_name: blockId
    }, attributes);

    var chatfuelApiUrl = _url2.default.format({
        pathname: chatfuelBroadcastUrl,
        query: query
    });

    var requestOptions = {
        uri: chatfuelApiUrl,
        headers: {
            'Content-Type': 'application/json'
        },
        json: true
    };

    return _requestPromise2.default.post(requestOptions);
};

exports.default = broadcast;